name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger pipeline when push code to branch `main`

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY_APP: 215747692665.dkr.ecr.ap-southeast-1.amazonaws.com/dev-app
  ECS_CLUSTER: dev-cluster
  ECS_SERVICE: dev-service
  TASK_DEFINITION: dev-task
  CONTAINER_APP: dev-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read

    steps:
      # Check out code from the GitHub repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials from account
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      # Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Install Python 3.12.5
      - name: Set up Python 3.12.5
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.5'

      # Cài đặt Poetry
      - name: Set up Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Install dependencies and run tests
      - name: Install dependencies and run tests
        run: |
          poetry install --no-root 
          poetry run pytest 
      # Build and push Docker image for the application
      - name: Build and push app image
        id: build-image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_APP }}:latest .
          docker push ${{ env.ECR_REPOSITORY_APP }}:latest  
          echo image=${{ env.ECR_REPOSITORY_APP }}:latest   >> $GITHUB_OUTPUT        

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read

    steps:
      # Check out code from the GitHub repository
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials from account
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      # Get the current Task Definition
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-app
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_APP }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          task-definition: ${{ steps.task-app.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
